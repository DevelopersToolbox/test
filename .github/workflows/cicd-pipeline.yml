name: CICD Pipeline

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      slack-notify:
        description: 'Notify Slack'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
    SLACK_NOTIFY: true

permissions: read-all

jobs:
  bandit:
    name: Bandit
    uses: WolfSoftware/reusable-workflows/.github/workflows/reusable-bandit.yml@master
    with:
      exclude-files: '\.md$'

  pycodestyle:
    name: Pycodestyle
    uses: WolfSoftware/reusable-workflows/.github/workflows/reusable-pycodestyle.yml@master
        env:
          EXCLUDE_FILES: '\.md$'

  pydocstyle:
    name: Pydocstyle
    uses: WolfSoftware/reusable-workflows/.github/workflows/reusable-pydocstyle.yml@master

  pylama:
    name: Pylama
    uses: WolfSoftware/reusable-workflows/.github/workflows/reusable-pylama.yml@master

  pylint:
    name: Pylint
    uses: WolfSoftware/reusable-workflows/.github/workflows/reusable-pylint.yml@master
    with:
      exclude-files: '\.md$,setup.py'

  get-python-versions:
    name: Get Python Versions
    runs-on: ubuntu-latest
    outputs:
      version-matrix: ${{ steps.get-language-versions.outputs.latest-versions }}
    steps:
    - uses: ActionsToolbox/get-language-versions-action@9a98a01e87286f073bbee069547aeeea4ea30265 # v0.1.2
      id: get-language-versions
      with:
        language: "python"

  pytest:
    name: Pytest
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ${{ fromJson(needs.get-python-versions.outputs.version-matrix) }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: Set up Python ${{ matrix.python-versions }}
        uses: actions/setup-python@57ded4d7d5e986d7296eab16560982c6dd7c923b # v4.6.0
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Install required packages
        run: |
          pip install -r requirements.txt
      - name: Run Pytest
        run: |
         pytest --no-header -vv

  set-slack-notify:
    name: Set Slack Notify
    runs-on: ubuntu-latest
    outputs:
      slack-notify: ${{ steps.set-slack-notify.outputs.slack-notify }}
    steps:
      - name: Set Slack Notify
        id: set-slack-notify
        run: |
          echo "slack-notify=${{ github.event.inputs.slack-notify || env.SLACK_NOTIFY }}" >> "${GITHUB_OUTPUT}"

  slack-workflow-status:
    if: always() && ${{ github.actor != 'dependabot[bot]' }}
    name: Slack Post Workflow Notification
    needs:
      - bandit
      - pycodestyle
      - pydocstyle
      - pylint
      - pylama
      - pytest
      - set-slack-notify
    uses: WolfSoftware/reusable-workflows/.github/workflows/reusable-slack.yml@master
    with:
      slack_notify: ${{ needs.set-slack-notify.outputs.slack-notify }}
    secrets:
      token: ${{ secrets.GITHUB_TOKEN }}
      slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
